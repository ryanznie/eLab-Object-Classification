#include <Arduino_KNN.h>
#include <KNNClassifier.h>

/*
 This code uses the built in KNNClassifier. The classifier is trained on pre-collected data and outputs one of three classes: apple, orange or lemon. The inputs into the classifier are RGB ratios computed as R/(R+G+B), G/(R+G+B), B/(R+G+B)
*/

#include <Arduino_APDS9960.h>

KNNClassifier myKNN(3);
float color_array[3] = {0,0,0};

void train(){

  float Apple[43][3] = {{0.379,0.308,0.312},{0.403,0.288,0.308},{0.403,0.289,0.307},{0.402,0.288,0.308},{0.358,0.312,0.328},{0.388,0.299,0.311},{0.386,0.298,0.314},{0.386,0.298,0.314},{0.386,0.298,0.315},{0.378,0.308,0.312},{0.356,0.313,0.329},{0.379,0.308,0.312},{0.400,0.289,0.309},{0.356,0.313,0.330},{0.377,0.308,0.313},{0.377,0.308,0.313},{0.403,0.289,0.307},{0.400,0.289,0.309},{0.386,0.298,0.315},{0.388,0.299,0.312},{0.386,0.298,0.314},{0.402,0.289,0.307},{0.356,0.313,0.330},{0.358,0.312,0.328},{0.401,0.289,0.309},{0.379,0.308,0.312},{0.389,0.299,0.311},{0.389,0.299,0.311},{0.379,0.308,0.312},{0.379,0.308,0.312},{0.403,0.289,0.307},{0.402,0.289,0.307},{0.388,0.299,0.311},{0.401,0.289,0.309},{0.403,0.289,0.307},{0.386,0.298,0.315},{0.388,0.299,0.312},{0.378,0.308,0.312},{0.388,0.299,0.312},{0.356,0.313,0.330},{0.401,0.289,0.308},{0.403,0.289,0.307},{0.389,0.299,0.311}};
  float Orange[43][3]= {{0.464,0.272,0.262},{0.372,0.314,0.313},{0.364,0.316,0.318},{0.336,0.326,0.336},{0.336,0.326,0.336},{0.387,0.307,0.305},{0.364,0.315,0.320},{0.471,0.266,0.261},{0.471,0.266,0.261},{0.464,0.273,0.262},{0.471,0.266,0.261},{0.479,0.262,0.258},{0.471,0.266,0.261},{0.336,0.326,0.336},{0.387,0.307,0.305},{0.336,0.326,0.336},{0.479,0.262,0.258},{0.471,0.266,0.261},{0.336,0.326,0.336},{0.336,0.326,0.336},{0.464,0.273,0.262},{0.366,0.314,0.319},{0.336,0.326,0.336},{0.479,0.262,0.258},{0.386,0.307,0.305},{0.387,0.307,0.305},{0.364,0.317,0.318},{0.362,0.315,0.322},{0.363,0.317,0.319},{0.336,0.324,0.339},{0.471,0.267,0.261},{0.336,0.326,0.336},{0.479,0.262,0.258},{0.336,0.326,0.336},{0.336,0.326,0.336},{0.369,0.315,0.315},{0.374,0.313,0.311},{0.336,0.325,0.338},{0.336,0.326,0.336},{0.366,0.314,0.319},{0.336,0.326,0.336},{0.336,0.326,0.336},{0.336,0.326,0.336}};
  float Lemon[43][3] = {{0.450,0.294,0.255},{0.452,0.291,0.256},{0.441,0.295,0.263},{0.437,0.299,0.262},{0.440,0.299,0.260},{0.444,0.292,0.262},{0.439,0.299,0.260},{0.444,0.292,0.262},{0.450,0.294,0.255},{0.450,0.294,0.255},{0.418,0.308,0.273},{0.418,0.308,0.273},{0.424,0.302,0.272},{0.452,0.291,0.256},{0.436,0.298,0.265},{0.444,0.292,0.262},{0.452,0.291,0.256},{0.440,0.299,0.260},{0.435,0.298,0.265},{0.418,0.308,0.273},{0.435,0.298,0.265},{0.435,0.298,0.265},{0.452,0.291,0.256},{0.441,0.295,0.263},{0.435,0.298,0.265},{0.441,0.295,0.263},{0.435,0.298,0.265},{0.444,0.292,0.262},{0.441,0.295,0.263},{0.437,0.299,0.262},{0.440,0.299,0.260},{0.435,0.298,0.265},{0.450,0.294,0.255},{0.418,0.308,0.273},{0.444,0.292,0.262},{0.452,0.291,0.256},{0.441,0.295,0.263},{0.418,0.308,0.273},{0.435,0.298,0.265},{0.441,0.295,0.263},{0.444,0.292,0.262},{0.444,0.292,0.262},{0.418,0.308,0.273}};  
  for (int i=0; i<43; i++){
    myKNN.addExample(Apple[i], 0);
    myKNN.addExample(Orange[i], 1);
    myKNN.addExample(Lemon[i], 2);
    
  }
}


void setup() {
  Serial.begin(9600);
  train();
  while (!Serial);

  if (!APDS.begin()) {
    Serial.println("Error initializing APDS-9960 sensor.");
  }
  
}
void get_color(){
  
  while (! APDS.colorAvailable()) {
      delay(5);
    }
  int r, g, b;
   // read the color
  APDS.readColor(r, g, b);
  //Serial.println(r);
  //Serial.println(g);
  //Serial.println(b);
  float sum = r+g+b;
  
  color_array[0] = r/sum;
  color_array[1] = g/sum;
  color_array[2] = b/sum;
  
}

void loop() {
 
  delay(1000);
  get_color();
  int fruit = myKNN.classify(color_array, 6);
  Serial.print("Class: ");
  if (fruit==0){
    Serial.println("Apple");
  }
  else if (fruit==1){
    Serial.println("Orange");
  }
  else{
    Serial.println("Lemon");
  }
  
  
}
